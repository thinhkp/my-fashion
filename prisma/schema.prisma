generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model category {
  id               Int               @id @default(autoincrement())
  name             String            @db.VarChar(100)
  description      String?
  categorystatus   Int               @db.SmallInt
  image            String?
  slug             String?           @db.VarChar(100)
  parentcategoryid Int?
  isshow           Boolean           @default(false)
  parentcategory   category?         @relation("categoryTocategory", fields: [parentcategoryid], references: [id], onUpdate: NoAction, map: "fk_category_parent")
  childcategory   category[]        @relation("categoryTocategory")
  productcategory  productcategory[]
}

model product {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(100)
  slug            String            @db.VarChar(50)
  description     String
  sku             String            @db.VarChar(50)
  price           Int
  discountprice   Int?
  status          Int               @db.SmallInt
  isfeatured      Boolean
  productcategory productcategory[]
  productimage    productimage[]
  productvariant  productvariant[]

  orderItem orderItem[]
}

model productcategory {
  productid  Int
  categoryid Int
  category   category @relation(fields: [categoryid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product    product  @relation(fields: [productid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([productid, categoryid])
}

model productimage {
  id             Int              @id @default(autoincrement())
  imageurl       String           @db.VarChar(255)
  displayorder   Int?             @db.SmallInt
  productid      Int?
  product        product?          @relation(fields: [productid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_productimage_product")
  productvariant productvariant[]
}

model size {
  id             String           @id @db.VarChar(5)
  name           String?
  description    String           @default("")
  productvariant productvariant[]
  index          Int              @db.SmallInt @default(0)
}

model color {
  id             String           @id @db.VarChar(5)
  name           String           @db.VarChar(50)
  code           String           @db.VarChar(20)
  productvariant productvariant[]
}

model productvariant {
  id              Int           @id @default(autoincrement())
  additionalprice Int?
  stockquantity   Int
  sku             String        @db.VarChar(50)
  productid       Int
  colorid         String        @db.VarChar(5)
  sizeid          String        @db.VarChar(5)
  imageid         Int?
  product         product       @relation(fields: [productid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_productvariant_product")
  image           productimage? @relation(fields: [imageid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_productvariant_productimage")
  color           color         @relation(fields: [colorid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  size            size          @relation(fields: [sizeid], references: [id], onDelete: NoAction, onUpdate: NoAction)

  orderItem orderItem[]
}


model user {
  userId       String    @id @default(uuid())
  username     String     @unique @default("defaultUsername")
  displayname  String     @default("DefaultName")
  email        String     @unique
  password     String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  userRoles    UserRole[]
  orders       order[]

  @@map("users")
}



model role {
  roleId         String         @id 
  name       String         @unique
  userRoles  UserRole[]
}

model UserRole {
  userId  String
  roleId  String

  user    user   @relation(fields: [userId], references: [userId])
  role    role   @relation(fields: [roleId], references: [roleId])

  @@id([userId, roleId]) // composite primary key
}



model order {
  id             String      @id @default(uuid())
  userId         String?
  totalPrice     Int         @default(0)
  shippingFee    Int         @default(0)
  status         Int         @default(0)  // PENDING, CONFIRMED, SHIPPING, DELIVERED, CANCELLED
  paymentMethod  String      @default("COD")      // COD, BANK_TRANSFER, MOMO, etc.
  paymentStatus  Int      @default(0)   // UNPAID, PAID
  
  // Thông tin giao hàng
  recipientName  String
  phone          String
  address        String
  note           String?
  
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  // Relations
  user           user?       @relation(fields: [userId], references: [userId], onDelete: SetNull)
  items          orderItem[]

  @@map("orders")
}

model orderItem {
  id              String    @id @default(uuid())
  orderId         String
  productId       Int
  variantId       Int?
  quantity        Int
  price           Int
  // Relations
  order           order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         product   @relation(fields: [productId], references: [id], onDelete: Restrict)
  variant         productvariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)
  
  @@map("order_items")
}


