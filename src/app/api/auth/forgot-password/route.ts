import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/services/prisma";
import { z } from "zod";
import nodemailer from "nodemailer";
import { EMAIL_USER, EMAIL_PASS } from "@/config/mailer";
import { SignJWT } from "jose";
import { JWT_SECRET } from "@/config/jwt";
import { BASE_DOMAIN } from "@/config/domain";

// Validation schema cho forgot password
const forgotPasswordSchema = z.object({
  email: z.string().email("Email kh√¥ng h·ª£p l·ªá"),
});

export async function POST(request: NextRequest) {
  try {
    // Parse request body
    const body = await request.json();

    // Validate request body
    const validationResult = forgotPasswordSchema.safeParse(body);
    if (!validationResult.success) {
      const errorMessages = validationResult.error.errors.map(
        (error) => error.message
      );
      return NextResponse.json(
        { success: false, message: errorMessages.join(", ") },
        { status: 400 }
      );
    }

    const { email } = validationResult.data;

    // Ki·ªÉm tra xem email c√≥ t·ªìn t·∫°i trong database kh√¥ng
    const user = await prisma.user.findUnique({
      where: {
        email: email,
      },
      select: {
        userId: true,
        email: true,
        displayname: true,
      },
    });

    // Tr·∫£ v·ªÅ l·ªói n·∫øu email kh√¥ng t·ªìn t·∫°i
    if (!user) {
      return NextResponse.json(
        {
          success: false,
          message: "Email n√†y kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng",
        },
        { status: 404 }
      );
    }

    // T·∫°o JWT reset token v·ªõi jose
    const secretKey = new TextEncoder().encode(JWT_SECRET);

    const resetToken = await new SignJWT({
      userId: user.userId,
      email: user.email,
      type: "password_reset",
    })
      .setProtectedHeader({ alg: "HS256" })
      .setExpirationTime("1h") // 1 hour
      .setIssuedAt()
      .sign(secretKey);

    // T·∫°o link reset password
    const resetLink = `${BASE_DOMAIN}/auth/reset-password?token=${resetToken}`;

    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: EMAIL_USER,
        pass: EMAIL_PASS,
      },
    });

    // T·∫°o HTML email v·ªõi button ƒë·∫πp
    const htmlContent = `
      <!DOCTYPE html>
      <html lang="vi">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</title>
      </head>
      <body style="margin: 0; padding: 0; background-color: #f8fafc; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;">
        <div style="max-width: 600px; margin: 0 auto; background-color: #ffffff; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
          <!-- Header -->
          <div style="background: linear-gradient(135deg, #ec4899 0%, #8b5cf6 100%); padding: 40px 20px; text-align: center;">
            <h1 style="color: #ffffff; margin: 0; font-size: 28px; font-weight: bold;">My Fashion</h1>
            <p style="color: #fce7f3; margin: 10px 0 0 0; font-size: 16px;">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u t√†i kho·∫£n</p>
          </div>
          
          <!-- Content -->
          <div style="padding: 40px 30px;">
            <h2 style="color: #1f2937; margin: 0 0 20px 0; font-size: 24px;">Xin ch√†o ${user.displayname}!</h2>
            
            <p style="color: #4b5563; line-height: 1.6; margin: 0 0 20px 0; font-size: 16px;">
              Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n. 
              Nh·∫•p v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ t·∫°o m·∫≠t kh·∫©u m·ªõi:
            </p>
            
            <!-- Reset Button -->
            <div style="text-align: center; margin: 40px 0;">
              <a href="${resetLink}" 
                 style="display: inline-block; background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%); 
                        color: #ffffff; text-decoration: none; padding: 16px 32px; 
                        border-radius: 12px; font-weight: bold; font-size: 16px; 
                        box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3); 
                        transition: all 0.3s ease;">
                üîê ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
              </a>
            </div>
            
            <div style="background-color: #f3f4f6; padding: 20px; border-radius: 8px; margin: 30px 0;">
              <p style="color: #6b7280; margin: 0 0 10px 0; font-size: 14px; font-weight: bold;">
                Ho·∫∑c copy v√† paste link sau v√†o tr√¨nh duy·ªát:
              </p>
              <p style="color: #3b82f6; word-break: break-all; margin: 0; font-size: 14px;">
                ${resetLink}
              </p>
            </div>
            
            <!-- Warning -->
            <div style="border-left: 4px solid #f59e0b; background-color: #fffbeb; padding: 16px; margin: 30px 0;">
              <p style="color: #92400e; margin: 0; font-size: 14px;">
                <strong>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</strong><br>
                ‚Ä¢ Link n√†y s·∫Ω h·∫øt h·∫°n sau <strong>1 gi·ªù</strong><br>
                ‚Ä¢ N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y<br>
                ‚Ä¢ Kh√¥ng chia s·∫ª link n√†y v·ªõi b·∫•t k·ª≥ ai
              </p>
            </div>
            
            <p style="color: #4b5563; line-height: 1.6; margin: 30px 0 0 0; font-size: 16px;">
              N·∫øu b·∫°n g·∫∑p kh√≥ khƒÉn khi nh·∫•p v√†o n√∫t tr√™n, h√£y copy v√† paste link v√†o thanh ƒë·ªãa ch·ªâ c·ªßa tr√¨nh duy·ªát.
            </p>
          </div>
          
          <!-- Footer -->
          <div style="background-color: #f9fafb; padding: 30px; text-align: center; border-top: 1px solid #e5e7eb;">
            <p style="color: #6b7280; margin: 0 0 10px 0; font-size: 14px;">
              Tr√¢n tr·ªçng,<br>
              <strong>ƒê·ªôi ng≈© h·ªó tr·ª£ My Fashion</strong>
            </p>
            <p style="color: #9ca3af; margin: 0; font-size: 12px;">
              Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.
            </p>
          </div>
        </div>
      </body>
      </html>
    `;

    try {
      const result = await transporter.sendMail({
        from: `"My Fashion" <${EMAIL_USER}>`,
        to: user.email,
        subject: "üîê ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - My Fashion",
        html: htmlContent,
      });

    } catch (emailError) {
      console.error("Failed to send email:", emailError);
      return NextResponse.json(
        {
          success: false,
          message: "Kh√¥ng th·ªÉ g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i sau." + emailError,
        },
        { status: 500 }
      );
    }

    // Tr·∫£ v·ªÅ th√†nh c√¥ng khi ƒë√£ g·ª≠i email
    return NextResponse.json(
      {
        success: true,
        message: "H∆∞·ªõng d·∫´n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n",
      },
      { status: 200 }
    );
  } catch (error) {
    return NextResponse.json(
      {
        success: false,
        message: "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu",
        error: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}
